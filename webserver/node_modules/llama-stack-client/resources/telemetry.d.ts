import { APIResource } from "../resource.js";
import * as Core from "../core.js";
import * as TelemetryAPI from "./telemetry.js";
export declare class Telemetry extends APIResource {
    getTrace(params: TelemetryGetTraceParams, options?: Core.RequestOptions): Core.APIPromise<TelemetryGetTraceResponse>;
    log(params: TelemetryLogParams, options?: Core.RequestOptions): Core.APIPromise<void>;
}
export interface TelemetryGetTraceResponse {
    root_span_id: string;
    start_time: string;
    trace_id: string;
    end_time?: string;
}
export interface TelemetryGetTraceParams {
    /**
     * Query param:
     */
    trace_id: string;
    /**
     * Header param: JSON-encoded provider data which will be made available to the
     * adapter servicing the API
     */
    'X-LlamaStack-ProviderData'?: string;
}
export interface TelemetryLogParams {
    /**
     * Body param:
     */
    event: TelemetryLogParams.UnstructuredLogEvent | TelemetryLogParams.MetricEvent | TelemetryLogParams.StructuredLogEvent;
    /**
     * Header param: JSON-encoded provider data which will be made available to the
     * adapter servicing the API
     */
    'X-LlamaStack-ProviderData'?: string;
}
export declare namespace TelemetryLogParams {
    interface UnstructuredLogEvent {
        message: string;
        severity: 'verbose' | 'debug' | 'info' | 'warn' | 'error' | 'critical';
        span_id: string;
        timestamp: string;
        trace_id: string;
        type: 'unstructured_log';
        attributes?: Record<string, boolean | number | string | Array<unknown> | unknown | null>;
    }
    interface MetricEvent {
        metric: string;
        span_id: string;
        timestamp: string;
        trace_id: string;
        type: 'metric';
        unit: string;
        value: number;
        attributes?: Record<string, boolean | number | string | Array<unknown> | unknown | null>;
    }
    interface StructuredLogEvent {
        payload: StructuredLogEvent.SpanStartPayload | StructuredLogEvent.SpanEndPayload;
        span_id: string;
        timestamp: string;
        trace_id: string;
        type: 'structured_log';
        attributes?: Record<string, boolean | number | string | Array<unknown> | unknown | null>;
    }
    namespace StructuredLogEvent {
        interface SpanStartPayload {
            name: string;
            type: 'span_start';
            parent_span_id?: string;
        }
        interface SpanEndPayload {
            status: 'ok' | 'error';
            type: 'span_end';
        }
    }
}
export declare namespace Telemetry {
    export import TelemetryGetTraceResponse = TelemetryAPI.TelemetryGetTraceResponse;
    export import TelemetryGetTraceParams = TelemetryAPI.TelemetryGetTraceParams;
    export import TelemetryLogParams = TelemetryAPI.TelemetryLogParams;
}
//# sourceMappingURL=telemetry.d.ts.map