import { APIResource } from "../../resource.js";
import { APIPromise } from "../../core.js";
import * as Core from "../../core.js";
import * as TurnsAPI from "./turns.js";
import * as Shared from "../shared.js";
import * as AgentsAPI from "./agents.js";
import { Stream } from "../../streaming.js";
export declare class Turns extends APIResource {
    create(params: TurnCreateParamsNonStreaming, options?: Core.RequestOptions): APIPromise<AgentsTurnStreamChunk>;
    create(params: TurnCreateParamsStreaming, options?: Core.RequestOptions): APIPromise<Stream<AgentsTurnStreamChunk>>;
    create(params: TurnCreateParamsBase, options?: Core.RequestOptions): APIPromise<Stream<AgentsTurnStreamChunk> | AgentsTurnStreamChunk>;
    retrieve(params: TurnRetrieveParams, options?: Core.RequestOptions): Core.APIPromise<Turn>;
}
export interface AgentsTurnStreamChunk {
    event: TurnStreamEvent;
}
export interface Turn {
    input_messages: Array<Shared.UserMessage | Shared.ToolResponseMessage>;
    output_attachments: Array<Shared.Attachment>;
    output_message: Shared.CompletionMessage;
    session_id: string;
    started_at: string;
    steps: Array<AgentsAPI.InferenceStep | AgentsAPI.ToolExecutionStep | AgentsAPI.ShieldCallStep | AgentsAPI.MemoryRetrievalStep>;
    turn_id: string;
    completed_at?: string;
}
export interface TurnStreamEvent {
    payload: TurnStreamEvent.AgentTurnResponseStepStartPayload | TurnStreamEvent.AgentTurnResponseStepProgressPayload | TurnStreamEvent.AgentTurnResponseStepCompletePayload | TurnStreamEvent.AgentTurnResponseTurnStartPayload | TurnStreamEvent.AgentTurnResponseTurnCompletePayload;
}
export declare namespace TurnStreamEvent {
    interface AgentTurnResponseStepStartPayload {
        event_type: 'step_start';
        step_id: string;
        step_type: 'inference' | 'tool_execution' | 'shield_call' | 'memory_retrieval';
        metadata?: Record<string, boolean | number | string | Array<unknown> | unknown | null>;
    }
    interface AgentTurnResponseStepProgressPayload {
        event_type: 'step_progress';
        step_id: string;
        step_type: 'inference' | 'tool_execution' | 'shield_call' | 'memory_retrieval';
        model_response_text_delta?: string;
        tool_call_delta?: AgentTurnResponseStepProgressPayload.ToolCallDelta;
        tool_response_text_delta?: string;
    }
    namespace AgentTurnResponseStepProgressPayload {
        interface ToolCallDelta {
            content: string | Shared.ToolCall;
            parse_status: 'started' | 'in_progress' | 'failure' | 'success';
        }
    }
    interface AgentTurnResponseStepCompletePayload {
        event_type: 'step_complete';
        step_details: AgentsAPI.InferenceStep | AgentsAPI.ToolExecutionStep | AgentsAPI.ShieldCallStep | AgentsAPI.MemoryRetrievalStep;
        step_type: 'inference' | 'tool_execution' | 'shield_call' | 'memory_retrieval';
    }
    interface AgentTurnResponseTurnStartPayload {
        event_type: 'turn_start';
        turn_id: string;
    }
    interface AgentTurnResponseTurnCompletePayload {
        event_type: 'turn_complete';
        turn: TurnsAPI.Turn;
    }
}
export type TurnCreateParams = TurnCreateParamsNonStreaming | TurnCreateParamsStreaming;
export interface TurnCreateParamsBase {
    /**
     * Body param:
     */
    agent_id: string;
    /**
     * Body param:
     */
    messages: Array<Shared.UserMessage | Shared.ToolResponseMessage>;
    /**
     * Body param:
     */
    session_id: string;
    /**
     * Body param:
     */
    attachments?: Array<Shared.Attachment>;
    /**
     * Body param:
     */
    stream?: boolean;
    /**
     * Header param: JSON-encoded provider data which will be made available to the
     * adapter servicing the API
     */
    'X-LlamaStack-ProviderData'?: string;
}
export declare namespace TurnCreateParams {
    type TurnCreateParamsNonStreaming = TurnsAPI.TurnCreateParamsNonStreaming;
    type TurnCreateParamsStreaming = TurnsAPI.TurnCreateParamsStreaming;
}
export interface TurnCreateParamsNonStreaming extends TurnCreateParamsBase {
    /**
     * Body param:
     */
    stream?: false;
}
export interface TurnCreateParamsStreaming extends TurnCreateParamsBase {
    /**
     * Body param:
     */
    stream: true;
}
export interface TurnRetrieveParams {
    /**
     * Query param:
     */
    agent_id: string;
    /**
     * Query param:
     */
    turn_id: string;
    /**
     * Header param: JSON-encoded provider data which will be made available to the
     * adapter servicing the API
     */
    'X-LlamaStack-ProviderData'?: string;
}
export declare namespace Turns {
    export import AgentsTurnStreamChunk = TurnsAPI.AgentsTurnStreamChunk;
    export import Turn = TurnsAPI.Turn;
    export import TurnStreamEvent = TurnsAPI.TurnStreamEvent;
    export import TurnCreateParams = TurnsAPI.TurnCreateParams;
    export import TurnCreateParamsNonStreaming = TurnsAPI.TurnCreateParamsNonStreaming;
    export import TurnCreateParamsStreaming = TurnsAPI.TurnCreateParamsStreaming;
    export import TurnRetrieveParams = TurnsAPI.TurnRetrieveParams;
}
//# sourceMappingURL=turns.d.ts.map