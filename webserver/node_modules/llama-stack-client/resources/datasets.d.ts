import { APIResource } from "../resource.js";
import * as Core from "../core.js";
import * as DatasetsAPI from "./datasets.js";
export declare class Datasets extends APIResource {
    create(params: DatasetCreateParams, options?: Core.RequestOptions): Core.APIPromise<void>;
    delete(params: DatasetDeleteParams, options?: Core.RequestOptions): Core.APIPromise<void>;
    get(params: DatasetGetParams, options?: Core.RequestOptions): Core.APIPromise<TrainEvalDataset>;
}
export interface TrainEvalDataset {
    columns: Record<string, 'dialog' | 'text' | 'media' | 'number' | 'json'>;
    content_url: string;
    metadata?: Record<string, boolean | number | string | Array<unknown> | unknown | null>;
}
export interface DatasetCreateParams {
    /**
     * Body param:
     */
    dataset: TrainEvalDataset;
    /**
     * Body param:
     */
    uuid: string;
    /**
     * Header param: JSON-encoded provider data which will be made available to the
     * adapter servicing the API
     */
    'X-LlamaStack-ProviderData'?: string;
}
export interface DatasetDeleteParams {
    /**
     * Body param:
     */
    dataset_uuid: string;
    /**
     * Header param: JSON-encoded provider data which will be made available to the
     * adapter servicing the API
     */
    'X-LlamaStack-ProviderData'?: string;
}
export interface DatasetGetParams {
    /**
     * Query param:
     */
    dataset_uuid: string;
    /**
     * Header param: JSON-encoded provider data which will be made available to the
     * adapter servicing the API
     */
    'X-LlamaStack-ProviderData'?: string;
}
export declare namespace Datasets {
    export import TrainEvalDataset = DatasetsAPI.TrainEvalDataset;
    export import DatasetCreateParams = DatasetsAPI.DatasetCreateParams;
    export import DatasetDeleteParams = DatasetsAPI.DatasetDeleteParams;
    export import DatasetGetParams = DatasetsAPI.DatasetGetParams;
}
//# sourceMappingURL=datasets.d.ts.map