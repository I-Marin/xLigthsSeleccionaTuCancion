// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../resource.mjs";
import { isRequestOptions } from "../../core.mjs";
import * as DocumentsAPI from "./documents.mjs";
export class Memory extends APIResource {
    constructor() {
        super(...arguments);
        this.documents = new DocumentsAPI.Documents(this._client);
    }
    create(params, options) {
        const { body, 'X-LlamaStack-ProviderData': xLlamaStackProviderData } = params;
        return this._client.post('/memory/create', {
            body: body,
            ...options,
            headers: {
                ...(xLlamaStackProviderData != null ?
                    { 'X-LlamaStack-ProviderData': xLlamaStackProviderData }
                    : undefined),
                ...options?.headers,
            },
        });
    }
    retrieve(params, options) {
        const { 'X-LlamaStack-ProviderData': xLlamaStackProviderData, ...query } = params;
        return this._client.get('/memory/get', {
            query,
            ...options,
            headers: {
                ...(xLlamaStackProviderData != null ?
                    { 'X-LlamaStack-ProviderData': xLlamaStackProviderData }
                    : undefined),
                ...options?.headers,
            },
        });
    }
    update(params, options) {
        const { 'X-LlamaStack-ProviderData': xLlamaStackProviderData, ...body } = params;
        return this._client.post('/memory/update', {
            body,
            ...options,
            headers: {
                Accept: '*/*',
                ...(xLlamaStackProviderData != null ?
                    { 'X-LlamaStack-ProviderData': xLlamaStackProviderData }
                    : undefined),
                ...options?.headers,
            },
        });
    }
    list(params = {}, options) {
        if (isRequestOptions(params)) {
            return this.list({}, params);
        }
        const { 'X-LlamaStack-ProviderData': xLlamaStackProviderData } = params;
        return this._client.get('/memory/list', {
            ...options,
            headers: {
                ...(xLlamaStackProviderData != null ?
                    { 'X-LlamaStack-ProviderData': xLlamaStackProviderData }
                    : undefined),
                ...options?.headers,
            },
        });
    }
    drop(params, options) {
        const { 'X-LlamaStack-ProviderData': xLlamaStackProviderData, ...body } = params;
        return this._client.post('/memory/drop', {
            body,
            ...options,
            headers: {
                Accept: 'application/json',
                ...(xLlamaStackProviderData != null ?
                    { 'X-LlamaStack-ProviderData': xLlamaStackProviderData }
                    : undefined),
                ...options?.headers,
            },
        });
    }
    insert(params, options) {
        const { 'X-LlamaStack-ProviderData': xLlamaStackProviderData, ...body } = params;
        return this._client.post('/memory/insert', {
            body,
            ...options,
            headers: {
                Accept: '*/*',
                ...(xLlamaStackProviderData != null ?
                    { 'X-LlamaStack-ProviderData': xLlamaStackProviderData }
                    : undefined),
                ...options?.headers,
            },
        });
    }
    query(params, options) {
        const { 'X-LlamaStack-ProviderData': xLlamaStackProviderData, ...body } = params;
        return this._client.post('/memory/query', {
            body,
            ...options,
            headers: {
                ...(xLlamaStackProviderData != null ?
                    { 'X-LlamaStack-ProviderData': xLlamaStackProviderData }
                    : undefined),
                ...options?.headers,
            },
        });
    }
}
(function (Memory) {
    Memory.Documents = DocumentsAPI.Documents;
})(Memory || (Memory = {}));
//# sourceMappingURL=memory.mjs.map